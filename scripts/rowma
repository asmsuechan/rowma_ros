#!/usr/bin/env python
import sys
import json
import ast
import rospy
import socketio
import requests
from rosbridge_library.rosbridge_protocol import RosbridgeProtocol
from subprocess import Popen
import signal
import os
import rosnode
import time

from lib import utils
from lib import socket_controller

rospy.init_node('rowma')
client_id_seed = 0
protocol = RosbridgeProtocol(client_id_seed)
# id = ''

sio = socketio.Client()

# launched_nodes = []
# subscribers = []

sc = socket_controller('', [], [], sio)

@sio.event(namespace='/rowma')
def connect():
    sc.connect()

@sio.on('robot_registered', namespace='/rowma')
def on_message(data):
    sc.robot_registered(data)

@sio.on('err', namespace='/rowma')
def on_message(data):
    print(data)
    # TODO: More smart exit
    os._exit(1)

@sio.on('rostopic', namespace='/rowma')
def on_message(data):
    sc.rostopic(data, protocol)

@sio.on('run_launch', namespace='/rowma')
def on_message(data):
    sc.run_launch(data)

@sio.on('run_rosrun', namespace='/rowma')
def on_message(data):
    sc.run_rosrun(data)

@sio.on('kill_rosnodes', namespace='/rowma')
def on_message(data):
    sc.kill_rosnodes(data)

@sio.event
def disconnect():
    print('disconnected from server')

def signal_handler(sig, frame):
    sio.disconnect()
    for node in launched_nodes:
        node.terminate()
    sys.exit(0)

def outgoing_func(message):
    print(subscribers)
    destinations = []
    msg = json.loads(message)
    for subscriber in subscribers:
        if subscriber['topic'] == msg['topic']:
            destinations.append(subscriber['deviceUuid'])
    msg['deviceUuids'] = destinations
    msg['robotUuid'] = id
    sio.emit('topic_from_ros', json.dumps(msg), namespace='/rowma')

protocol.outgoing = outgoing_func

server_url = os.environ.get('ROWMA_SERVER_URL') or 'http://18.176.1.219'
sio.connect(server_url)
signal.signal(signal.SIGINT, signal_handler)
signal.pause()
