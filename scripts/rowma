#!/usr/bin/env python
import sys
import json
import ast
import rospy
import socketio
import requests
import Geohash
import subprocess as sp
from rosbridge_library.rosbridge_protocol import RosbridgeProtocol
from subprocess import Popen
import signal
import os
import re
import rosnode
import time

rospy.init_node('rowma')
client_id_seed = 0
protocol = RosbridgeProtocol(client_id_seed)
id = ''

sio = socketio.Client()

launched_nodes = []
subscribers = []

# Description: Shape path to roslaunch available command.
# @param: path <string> '/dir/package_name/launch/package.launch'
# output: command <string> 'package_name package.launch'
def path_to_command(path):
    splited_path = path.split('/')
    if (len(splited_path) < 3):
        return
    i = 0
    launch_index = 0
    while (i < len(splited_path)):
        if (splited_path[i] == 'launch'):
            launch_index = i
        i += 1
    return splited_path[launch_index - 1] + ' ' + splited_path[launch_index + 1]

# /src/ or /devel/lib/
def path_to_rosrun_command(path):
    splited_path = path.split('/')
    if (len(splited_path) < 3): return
    i = 0
    result = ''
    while (i < len(splited_path)):
        if (splited_path[i] == 'scripts'):
            result = splited_path[i - 1] + ' ' + splited_path[i + 1]
        elif (splited_path[i] == 'lib'):
            # To deal with ~/catkin_ws/devel/lib/some_lib.so
            if (i + 2 >= len(splited_path)): break
            result = splited_path[i + 1] + ' ' + splited_path[i + 2]
        i += 1
    return result

# Description: Get package commands list located at ROS_PACKAGE_PATH environment variable
# output: commands Array<string> ['package_name package.launch']
def list_launch_commands():
    ros_package_path = os.environ['ROS_PACKAGE_PATH']
    paths = ros_package_path.split(':')

    if len(paths) < 1:
        sys.exit('Set ROS_PACKAGE_PATH correctly')

    packages = []
    for path in paths:
        m = re.match(r'^/opt/ros', path)
        if m:
            break
        packages += sp.check_output("find " + path + " | grep \'\\.launch\'", shell=True).decode('utf-8').strip().split('\n')
    commands = []
    for package_path in packages:
        commands.append(path_to_command(package_path))
    return commands

def list_rosorun_commands():
    ros_package_path = os.environ['ROS_PACKAGE_PATH']
    paths = ros_package_path.split(':')

    if len(paths) < 1:
        sys.exit('Set ROS_PACKAGE_PATH correctly')

    packages = []
    for path in paths:
        m = re.match(r'^/opt/ros', path)
        if m:
            break
        # Cut the last dir path
        ws_root = re.sub('[^/]+(?=/$|$)', '', path)
        packages += sp.check_output("find " + ws_root + " -maxdepth 4 -perm -111 -type f | grep -E \'devel|src\'", shell=True).decode('utf-8').strip().split('\n')

    commands = []
    for package_path in packages:
        commands.append(path_to_rosrun_command(package_path))

    commands = list(filter(None, commands))
    return commands

@sio.event(namespace='/rowma')
def connect():
    print('connection established')
    launch_commands = list_launch_commands()
    rosrun_commands = list_rosorun_commands()
    uuid = os.environ.get('UUID') or id
    msg = {
            'uuid': uuid,
            'launch_commands': launch_commands,
            'rosnodes': rosnode.get_node_names(),
            'rosrun_commands': rosrun_commands
            }

    api_key = os.environ.get('API_KEY')
    if api_key:
        msg['api_key'] = api_key

    sio.emit('register_robot', json.dumps(msg), namespace='/rowma')

@sio.on('robot_registered', namespace='/rowma')
def on_message(data):
    global id
    id = id or data['uuid']
    print('Your UUID is: ' + id)

@sio.on('err', namespace='/rowma')
def on_message(data):
    print(data)
    # TODO: More smart exit
    os._exit(1)

@sio.on('rostopic', namespace='/rowma')
def on_message(data):
    # TODO: Separate by operation
    if data['op'] == 'subscribe':
        subscribers.append({ 'topic': data['topic'], 'deviceUuid': data['deviceUuid'] })
    message = ast.literal_eval(json.dumps(data))
    print(message)
    protocol.incoming(json.dumps(message))

@sio.on('run_launch', namespace='/rowma')
def on_message(data):
    launch_commands = list_launch_commands()
    print(launch_commands)
    if data.get('command') in launch_commands:
        cmd = 'roslaunch ' + data.get('command')
        launched_nodes.append(Popen(cmd.split()))

        # Note: The launched rosnode-name does not appear the soon after roslaunch is executed.
        # Therefore, sleep is neccessary to wait it finishes to launch.
        time.sleep(2)
        msg = {
            'uuid': id,
            'rosnodes': rosnode.get_node_names()
            }
        sio.emit('update_rosnodes', json.dumps(msg), namespace='/rowma')
        print('run_launch')
        print(data)

@sio.on('run_rosrun', namespace='/rowma')
def on_message(data):
    rosrun_commands = list_rosorun_commands()
    print(rosrun_commands)
    if data.get('command') in rosrun_commands:
        cmd = 'rosrun ' + data.get('command') + ' ' + data.get('args')
        print(cmd)
        launched_nodes.append(Popen(cmd.split()))

        # Note: The launched rosnode-name does not appear the soon after roslaunch is executed.
        # Therefore, sleep is neccessary to wait it finishes to launch.
        time.sleep(2)
        msg = {
            'uuid': id,
            'rosnodes': rosnode.get_node_names()
            }
        sio.emit('update_rosnodes', json.dumps(msg), namespace='/rowma')
        print('run_rosrun')
        print(data)

@sio.on('kill_rosnodes', namespace='/rowma')
def on_message(data):
    rosnode.kill_nodes(data.get('rosnodes'))
    # Note: The launched rosnode-name does not appear the soon after roslaunch is executed.
    # Therefore, sleep is neccessary to wait it finishes to launch.
    time.sleep(2)
    msg = {
        'uuid': id,
        'rosnodes': rosnode.get_node_names()
        }
    sio.emit('update_rosnodes', json.dumps(msg), namespace='/rowma')
    print('killed')

@sio.event
def disconnect():
    print('disconnected from server')

def signal_handler(sig, frame):
    sio.disconnect()
    for node in launched_nodes:
        node.terminate()
    sys.exit(0)

def outgoing_func(message):
    print(subscribers)
    destinations = []
    msg = json.loads(message)
    for subscriber in subscribers:
        if subscriber['topic'] == msg['topic']:
            destinations.append(subscriber['deviceUuid'])
    msg['deviceUuids'] = destinations
    msg['robotUuid'] = id
    sio.emit('topic_from_ros', json.dumps(msg), namespace='/rowma')

protocol.outgoing = outgoing_func

server_url = os.environ.get('ROWMA_SERVER_URL') or 'http://18.176.1.219'
sio.connect(server_url)
signal.signal(signal.SIGINT, signal_handler)
signal.pause()
